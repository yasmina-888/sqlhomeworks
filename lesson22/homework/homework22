SELECT *,
  SUM(total_amount) OVER (PARTITION BY customer_id ORDER BY order_date
    ROWS UNBOUNDED PRECEDING) AS running_total_per_customer
FROM sales_data;
Groups by customer and accumulates totals over time using a window function—clean and efficient. 
Stack Overflow
Medium

2. Count Orders per Product Category

SELECT product_category, COUNT(*) AS order_count
FROM sales_data
GROUP BY product_category;
3. Max Total Amount per Product Category

SELECT product_category, MAX(unit_price) AS max_price
FROM sales_data
GROUP BY product_category;
4. Min Price per Product Category

SELECT product_category, MIN(unit_price) AS min_price
FROM sales_data
GROUP BY product_category;
5. 3-Day Moving Average of Sales (prev, curr, next)

SELECT *,
  AVG(total_amount) OVER (
    ORDER BY order_date
    ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING
  ) AS moving_avg_3day
FROM (
  SELECT order_date, SUM(total_amount) AS total_amount
  FROM sales_data
  GROUP BY order_date
) AS daily;
6. Total Sales per Region

SELECT region, SUM(total_amount) AS total_sales
FROM sales_data
GROUP BY region;
7. Customer Rank by Total Purchase Amount

SELECT customer_id, customer_name,
  SUM(total_amount) AS total_spent,
  RANK() OVER (ORDER BY SUM(total_amount) DESC) AS rank_overall
FROM sales_data
GROUP BY customer_id, customer_name;
8. Difference Between Current and Previous Sale Amount per Customer

SELECT *,
  total_amount - LAG(total_amount) OVER (
    PARTITION BY customer_id ORDER BY order_date
  ) AS diff_from_previous
FROM sales_data;
9. Top 3 Most Expensive Products in Each Category

SELECT *
FROM (
  SELECT *,
    ROW_NUMBER() OVER (
      PARTITION BY product_category ORDER BY total_amount DESC
    ) AS rn
  FROM sales_data
) AS ranked
WHERE rn <= 3;
10. Cumulative Sum of Sales per Region by Order Date

SELECT *,
  SUM(total_amount) OVER (
    PARTITION BY region ORDER BY order_date
    ROWS UNBOUNDED PRECEDING
  ) AS cum_sales_region
FROM sales_data;
Medium Questions
A. Cumulative Revenue per Product Category (Sample ID)
For the given sample:


SELECT ID,
  SUM(ID) OVER (ORDER BY ID ROWS UNBOUNDED PRECEDING) AS SumPreValues
FROM (VALUES (1),(2),(3),(4),(5)) AS t(ID);
And for your OneColumn table:


SELECT Value,
  SUM(Value) OVER (ORDER BY (SELECT NULL) ROWS UNBOUNDED PRECEDING) AS SumOfPrevious
FROM OneColumn;
B. Customers with Purchases in More Than One Category

SELECT customer_id, customer_name
FROM sales_data
GROUP BY customer_id, customer_name
HAVING COUNT(DISTINCT product_category) > 1;
C. Customers with Above-Average Spending in Their Region

WITH region_avg AS (
  SELECT region, AVG(total_amount) AS avg_spend
  FROM sales_data
  GROUP BY region
)
SELECT sd.customer_id, sd.customer_name, sd.region, SUM(sd.total_amount) AS total_spend
FROM sales_data sd
JOIN region_avg ra ON sd.region = ra.region
GROUP BY sd.customer_id, sd.customer_name, sd.region, ra.avg_spend
HAVING SUM(sd.total_amount) > ra.avg_spend;
D. Rank Customers Buying Power in Each Region (Ties Allowed)

SELECT customer_id, customer_name, region, total_spent,
  DENSE_RANK() OVER (PARTITION BY region ORDER BY total_spent DESC) AS regional_rank
FROM (
  SELECT customer_id, customer_name, region, SUM(total_amount) AS total_spent
  FROM sales_data
  GROUP BY customer_id, customer_name, region
) AS t;
E. Running Total of Sales per Customer, by Order Date

SELECT *,
  SUM(total_amount) OVER (
    PARTITION BY customer_id ORDER BY order_date
    ROWS UNBOUNDED PRECEDING
  ) AS running_total
FROM sales_data;
Cited through pattern for partitioned running totals 
Medium
databasestar.com

F. Monthly Sales Growth Rate Compared to Previous Month

WITH monthly AS (
  SELECT DATEFROMPARTS(YEAR(order_date), MONTH(order_date), 1) AS month_start,
    SUM(total_amount) AS total_monthly
  FROM sales_data
  GROUP BY YEAR(order_date), MONTH(order_date)
)
SELECT month_start, total_monthly,
  (total_monthly - LAG(total_monthly) OVER (ORDER BY month_start))
    / LAG(total_monthly) OVER (ORDER BY month_start) * 100.0
    AS growth_rate_percent
FROM monthly;
G. Customers with Total Higher Than Their Last Order’s Total

WITH last_order AS (
  SELECT customer_id,
    MAX(order_date) AS last_date
  FROM sales_data
  GROUP BY customer_id
)
SELECT sd.customer_id, sd.customer_name, sd.total_amount, sd.order_date
FROM sales_data sd
JOIN last_order lo ON sd.customer_id = lo.customer_id
WHERE sd.order_date < lo.last_date
  AND sd.total_amount < (
    SELECT total_amount FROM sales_data
    WHERE customer_id = sd.customer_id AND order_date = lo.last_date
  );
H. Find Seats Gaps (Missing Ranges)
Using a window function:


WITH seats_cte AS (
  SELECT SeatNumber,
    LEAD(SeatNumber) OVER (ORDER BY SeatNumber) AS next_seat
  FROM Seats
)
SELECT SeatNumber + 1 AS GapStart, next_seat - 1 AS GapEnd
FROM seats_cte
WHERE next_seat IS NOT NULL AND next_seat - SeatNumber > 1
